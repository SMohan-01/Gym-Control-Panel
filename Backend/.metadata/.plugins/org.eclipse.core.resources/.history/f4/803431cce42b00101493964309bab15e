package in.mohan.gym_management_system.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import in.mohan.gym_management_system.entity.MemberEntity;
import in.mohan.gym_management_system.exception.MemberAlreadyExistException;
import in.mohan.gym_management_system.exception.MemberNotExistException;
import in.mohan.gym_management_system.service.MemberService;

@RestController
@RequestMapping("/api/v1")
public class MemberController {

	private final MemberService memberService;

	@Autowired
	public MemberController(MemberService memberService) {
		super();
		this.memberService = memberService;
	}

	@PostMapping("members/register")
	public ResponseEntity<?> registerMember(@RequestBody MemberEntity memberEntity) {
		ResponseEntity<?> responseEntity;
		try {
			responseEntity = new ResponseEntity<>(memberService.registerMember(memberEntity), HttpStatus.CREATED);
		} catch (MemberAlreadyExistException exception) {
			responseEntity = new ResponseEntity<>(exception.getMessage(), HttpStatus.BAD_REQUEST);
		}
		return responseEntity;
	}
	
	@GetMapping("members/fetchMember/{emailAddress}")
	public ResponseEntity<?> fetchMember(@PathVariable String emailAddress) {
		ResponseEntity<?> responseEntity;
		try {
			responseEntity = new ResponseEntity<>(memberService.getParticularMember(emailAddress), HttpStatus.CREATED);
		} catch (MemberNotExistException exception) {
			responseEntity = new ResponseEntity<>(exception.getMessage(), HttpStatus.BAD_REQUEST);
		}
		return responseEntity;
	}
	
	@GetMapping("members/fetchAllMembers")
	public ResponseEntity<?> fetchAllMembers() {
		ResponseEntity<?> responseEntity;
		try {
			responseEntity = new ResponseEntity<>(memberService., HttpStatus.CREATED);
		} catch (MemberNotExistException exception) {
			responseEntity = new ResponseEntity<>(exception.getMessage(), HttpStatus.BAD_REQUEST);
		}
		return responseEntity;
	}

}
